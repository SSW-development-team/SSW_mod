#経済タブ
calculate_country_inflation_rate = {
	set_temp_variable = { ecotemp1 = 0.046 }
	multiply_temp_variable = { ecotemp1 = country_inflation_late }
	multiply_temp_variable = { ecotemp1 = 2.7591 }
	clamp_temp_variable = { var = ecotemp1 min = -25 max = 50 }
	set_variable = { country_inflation_late_for_consumer_goods_factor = ecotemp1 }
	set_temp_variable = { ecotemp2 = country_inflation_late_for_consumer_goods_factor }
	multiply_temp_variable = { ecotemp2 = 0.01 }
	set_variable = { country_inflation_late_for_consumer_goods_factor_2 = ecotemp2 }
}
calculate_country_tax_rate = {
	clamp_variable = { var = country_tax_rate mix = 25 max = 50 }
	set_temp_variable = { ecotemp3 = country_tax_late }
	set_temp_variable = { ecotemp4 = country_tax_late }
	set_temp_variable = { ecotemp5 = country_tax_late }
	set_variable = { country_tax_late_for_consumer_goods_factor = 5 }
	set_variable = { country_tax_late_for_stability_factor = 20 }
	add_to_temp_variable = { ecotemp3 = -25 }
	multiply_temp_variable = { ecotemp3 = 16.4 }
	set_variable = { scrollbar_point1XPos = ecotemp3 }
	add_to_temp_variable = { ecotemp4 = -25 }
	multiply_temp_variable = { ecotemp4 = 0.4 }
	subtract_from_variable = { country_tax_late_for_consumer_goods_factor = ecotemp4 }
	multiply_variable = { country_tax_late_for_consumer_goods_factor = 0.01 }
	add_to_temp_variable = { ecotemp5 = -25 }
	multiply_temp_variable = { ecotemp5 = -1.6 }
	add_to_variable = { country_tax_late_for_stability_factor = ecotemp5 }
	multiply_variable = { country_tax_late_for_stability_factor = 0.01 }
}
calculate_national_debt = {
	clamp_variable = { var = country_debt_value mix = 1 max = 50 }
	set_temp_variable = { ecotemp6 = country_debt_value }
	set_temp_variable = { ecotemp7 = country_debt_value }
	multiply_temp_variable = { ecotemp6 = 0.2845 }
	multiply_temp_variable = { ecotemp6 = 0.0001 }
	set_variable = { country_debt_value_for_consumer_good_factor = ecotemp6 }
	multiply_temp_variable = { ecotemp7 = 0.65 }
	multiply_temp_variable = { ecotemp7 = 0.80 }
	multiply_temp_variable = { ecotemp7 = 0.01 }
	set_variable = { country_debt_value_for_production_speed_buildings_factor = ecotemp7 }
}
#社会タブ
update_growth_rate = {
	set_variable = { country_industrialization_growth_rate_2 = 0 }
	set_variable = { country_industrialization_growth_rate_2 = country_industrialization_growth_rate }
	set_temp_variable = { temp2 = country_Industrialization_growth_rate_2 }
	add_to_temp_variable = { temp2 = modifier@industrialization_growth_rate_modifier }
	set_temp_variable = { temp5 = temp2 }
	multiply_temp_variable = { temp5 = modifier@industrialization_growth_rate_factor }
	add_to_temp_variable = { temp2 = temp5 }
	set_variable = { country_industrialization_growth_rate_2 = temp2 }
	##
	set_variable = { country_poverty_growth_rate_2 = 0 }
	set_variable = { country_poverty_growth_rate_2 = country_poverty_growth_rate }
	set_temp_variable = { temp3 = country_poverty_growth_rate_2 }
	add_to_temp_variable = { temp3 = modifier@poverty_growth_rate_modifier }
	set_temp_variable = { temp6 = temp3 }
	multiply_temp_variable = { temp6 = modifier@poverty_growth_rate_factor }
	add_to_temp_variable = { temp3 = temp6 }
	set_variable = { country_poverty_growth_rate_2 = temp3 }
	##
	set_variable = { country_literacy_growth_rate_2 = 0 }
	set_variable = { country_literacy_growth_rate_2 = country_literacy_growth_rate }
	set_temp_variable = { temp4 = country_literacy_growth_rate_2 }
	add_to_temp_variable = { temp4 = modifier@literacy_growth_rate_modifier }
	set_temp_variable = { temp7 = temp4 }
	multiply_temp_variable = { temp7 = modifier@literacy_growth_rate_factor }
	add_to_temp_variable = { temp4 = temp7 }
	set_variable = { country_literacy_growth_rate_2 = temp4 }
}
calculate_country_Industrialization_growth_rate_to_add = {
	add_to_variable = { country_Industrialization_rate = country_Industrialization_growth_rate_2 }
	if = {
		limit = {
			OR = {
				check_variable = { country_Industrialization_rate < 20 }
				check_variable = { country_Industrialization_rate = 20 }	
			}
			NOT = {
				has_idea = idea_social_tab_industrialization_level_1
			}
		}
		delete_all_industrialization_rate_idea = yes
		add_ideas = idea_social_tab_industrialization_level_1
	}
	if = {
		limit = {
			OR = {
				check_variable = { country_Industrialization_rate < 40 }
				check_variable = { country_Industrialization_rate = 40 }
			}
			check_variable = { country_Industrialization_rate > 20 }
			NOT = {
				has_idea = idea_social_tab_industrialization_level_2
			}
		}
		delete_all_industrialization_rate_idea = yes
		add_ideas = idea_social_tab_industrialization_level_2
	}
	if = {
		limit = {
			check_variable = { country_Industrialization_rate > 40 }
			OR = {
				check_variable = { country_Industrialization_rate < 60 }
				check_variable = { country_Industrialization_rate = 60 }
			}
			NOT = {
				has_idea = idea_social_tab_industrialization_level_3
			}
		}
		delete_all_industrialization_rate_idea = yes
		add_ideas = idea_social_tab_industrialization_level_3
	}
	if = {
		limit = {
			check_variable = { country_Industrialization_rate > 60 }
			OR = {
				check_variable = { country_Industrialization_rate < 80 }
				check_variable = { country_Industrialization_rate = 80 }
			}
			NOT = {
				has_idea = idea_social_tab_industrialization_level_4
			}
		}
		delete_all_industrialization_rate_idea = yes
		add_ideas = idea_social_tab_industrialization_level_4
	}
	if = {
		limit = {
			check_variable = { country_Industrialization_rate > 80 }
			NOT = {
				has_idea = idea_social_tab_industrialization_level_5
			}
		}
		delete_all_industrialization_rate_idea = yes
		add_ideas = idea_social_tab_industrialization_level_5
	}
	clamp_variable = { var = country_industrialization_rate min = 0 max = 100 }
}
calculate_country_poverty_rate_growth_rate_to_add = {
	add_to_variable = { country_poverty_rate = country_poverty_growth_rate_2 }
	if = {
		limit = {
			OR = {
				check_variable = { country_poverty_rate < 20 }
				check_variable = { country_poverty_rate = 20 }	
			}
			NOT = {
				has_idea = idea_social_tab_poverty_level_1
			}
		}
		delete_all_poverty_rate_idea = yes
		add_ideas = idea_social_tab_poverty_level_1
	}
	if = {
		limit = {
			OR = {
				check_variable = { country_poverty_rate < 40 }
				check_variable = { country_poverty_rate = 40 }
			}
			check_variable = { country_poverty_rate > 20 }
			NOT = {
				has_idea = idea_social_tab_poverty_level_2
			}
		}
		delete_all_poverty_rate_idea = yes
		add_ideas = idea_social_tab_poverty_level_2
	}
	if = {
		limit = {
			check_variable = { country_poverty_rate > 40 }
			OR = {
				check_variable = { country_poverty_rate < 60 }
				check_variable = { country_poverty_rate = 60 }
			}
			NOT = {
				has_idea = idea_social_tab_poverty_level_3
			}
		}
		delete_all_poverty_rate_idea = yes
		add_ideas = idea_social_tab_poverty_level_3
	}
	if = {
		limit = {
			check_variable = { country_poverty_rate > 60 }
			OR = {
				check_variable = { country_poverty_rate < 80 }
				check_variable = { country_poverty_rate = 80 }
			}
			NOT = {
				has_idea = idea_social_tab_poverty_level_4
			}
		}
		delete_all_poverty_rate_idea = yes
		add_ideas = idea_social_tab_poverty_level_4
	}
	if = {
		limit = {
			check_variable = { country_poverty_rate > 80 }
			NOT = {
				has_idea = idea_social_tab_poverty_level_5
			}
		}
		delete_all_poverty_rate_idea = yes
		add_ideas = idea_social_tab_poverty_level_5
	}
	clamp_variable = { var = country_poverty_rate min = 0 max = 100 }
	clamp_variable = { var = country_poverty_rate_2 min = 0 max = 100 }
}
calculate_country_literacy_rate_growth_rate_to_add = {
	add_to_variable = { country_literacy_rate = country_literacy_growth_rate_2 }
	if = {
		limit = {
			OR = {
				check_variable = { country_literacy_rate < 20 }
				check_variable = { country_literacy_rate = 20 }	
			}
			NOT = {
				has_idea = idea_social_tab_literacy_level_1
			}
		}
		delete_all_literacy_rate_idea = yes
		add_ideas = idea_social_tab_literacy_level_1
	}
	if = {
		limit = {
			OR = {
				check_variable = { country_literacy_rate < 40 }
				check_variable = { country_literacy_rate = 40 }
			}
			check_variable = { country_literacy_rate > 20 }
			NOT = {
				has_idea = idea_social_tab_literacy_level_2
			}
		}
		delete_all_literacy_rate_idea = yes
		add_ideas = idea_social_tab_literacy_level_2
	}
	if = {
		limit = {
			check_variable = { country_literacy_rate > 40 }
			OR = {
				check_variable = { country_literacy_rate < 60 }
				check_variable = { country_literacy_rate = 60 }
			}
			NOT = {
				has_idea = idea_social_tab_literacy_level_3
			}
		}
		delete_all_literacyrate_idea = yes
		add_ideas = idea_social_tab_literacy_level_3
	}
	if = {
		limit = {
			check_variable = { country_literacy_rate > 60 }
			OR = {
				check_variable = { country_literacy_rate < 80 }
				check_variable = { country_literacy_rate = 80 }
			}
			NOT = {
				has_idea = idea_social_tab_literacy_level_4
			} 
		}
		delete_all_literacyy_rate_idea = yes
		add_ideas = idea_social_tab_literacy_level_4
	}
	if = {
		limit = {
			check_variable = { country_literacy_rate > 80 }
			NOT = {
				has_idea = idea_social_tab_literacy_level_5
			}
		}
		delete_all_literacy_rate_idea = yes
		add_ideas = idea_social_tab_literacy_level_5
	}
	clamp_variable = { var = country_literacy_rate min = 0 max = 100 }
}
calculate_country_reserch_invest_to_add = {
		set_temp_variable = { temp1 = num_of_civilian_factories }
		multiply_temp_variable = { temp1 = country_industrial_complex_invest }
		divide_temp_variable = { temp1 = 4.5 }
		add_to_temp_variable = { temp1 = modifier@research_institute_invest_growth_modifier }
		add_to_variable = { country_research_institute = temp1  }
		clamp_variable = { var = country_research_institute min = -200 max = 600 }
		if = {
			limit = {
				check_variable = { country_research_institute_level = 1 }
				NOT = {
					has_idea = idea_social_tab_research_institute_level_1
				}
			}
			delete_all_research_institute_idea = yes
			add_ideas = idea_social_tab_research_institute_level_1
		}
		if = {
			limit = {
				check_variable = { country_research_institute_level = 2 }
				NOT = {
					has_idea = idea_social_tab_research_institute_level_2
				}
			}
			delete_all_research_institute_idea = yes
			add_ideas = idea_social_tab_research_institute_level_2
		}
		if = {
			limit = {
				check_variable = { country_research_institute_level = 3 }
			}
			NOT = {
					has_idea = idea_social_tab_research_institute_level_3
				}
			delete_all_research_institute_idea = yes
			add_ideas = idea_social_tab_research_institute_level_3
		}
		if = {
			limit = {
				check_variable = { country_research_institute_level = 4 }
			}
			NOT = {
					has_idea = idea_social_tab_research_institute_level_4
				}
			delete_all_research_institute_idea = yes
			add_ideas = idea_social_tab_research_institute_level_4
		}
		if = {
			limit = {
				check_variable = { country_research_institute_level = 5 }
				NOT = {
					has_idea = idea_social_tab_research_institute_level_5
				}
			}
			delete_all_research_institute_idea = yes
			add_ideas = idea_social_tab_research_institute_level_5
		}
}
reload_policy_tab_dynamic_modifiers = {
}
delete_all_industrialization_rate_idea = {
	remove_ideas = {
		idea_social_tab_industrialization_level_1
		idea_social_tab_industrialization_level_2
		idea_social_tab_industrialization_level_3
		idea_social_tab_industrialization_level_4
		idea_social_tab_industrialization_level_5
	}
}
delete_all_poverty_rate_idea = {
	remove_ideas = {
		idea_social_tab_poverty_level_1
		idea_social_tab_poverty_level_2
		idea_social_tab_poverty_level_3
		idea_social_tab_poverty_level_4
		idea_social_tab_poverty_level_5
	}
}
delete_all_literacy_rate_idea = {
	remove_ideas = {
		idea_social_tab_literacy_level_1
		idea_social_tab_literacy_level_2
		idea_social_tab_literacy_level_3
		idea_social_tab_literacy_level_4
		idea_social_tab_literacy_level_5
	}
}
delete_all_research_institute_idea = {
	remove_ideas = {
		idea_social_tab_research_institute_level_1
		idea_social_tab_research_institute_level_2
		idea_social_tab_research_institute_level_3
		idea_social_tab_research_institute_level_4
		idea_social_tab_research_institute_level_5
	}
}
#徴兵人種
set_conscription_single_racial_army = {
	custom_effect_tooltip = set_debug_1
	remove_ideas = {
		idea_military_tab_ethnic_units
		idea_military_tab_mixed_army
	}
	add_ideas = idea_military_tab_single_racial_army
}
set_conscription_ethnic_units = {
	remove_ideas = {
		idea_military_tab_single_racial_army
		idea_military_tab_mixed_army
	}
	add_ideas = idea_military_tab_ethnic_units
}
set_conscription_mixed_army = {
	remove_ideas = {
		idea_military_tab_single_racial_army
		idea_military_tab_ethnic_units
	}
	add_ideas = idea_military_tab_mixed_army
}
#免除規定
set_agree_female_conscription = {
	remove_ideas = {
		idea_military_tab_disagree_female_conscription
	}
	add_ideas = idea_military_tab_agree_female_conscription
}
set_disagree_female_conscription = {
	remove_ideas = {
		idea_military_tab_agree_female_conscription
	}
	add_ideas = idea_military_tab_disagree_female_conscription
}
set_colony_not_mobilization = {
	remove_ideas = {
		idea_military_tab_colony_small_scale_mobilization
		idea_military_tab_colony_medium_scale_mobilization
		idea_military_tab_colony_large_scale_mobilization
	}
	add_ideas = idea_military_tab_colony_not_mobilization
}
set_colony_small_scale_mobilization = {
	remove_ideas = {
		idea_military_tab_colony_not_mobilization
		idea_military_tab_colony_medium_scale_mobilization
		idea_military_tab_colony_large_scale_mobilization
	}
	add_ideas = idea_military_tab_colony_small_scale_mobilization
}
set_colony_medium_scale_mobilization = {
	remove_ideas = {
		idea_military_tab_colony_not_mobilization
		idea_military_tab_colony_small_scale_mobilization
		idea_military_tab_colony_large_scale_mobilization
	}
	add_ideas = idea_military_tab_colony_medium_scale_mobilization
}
set_colony_large_scale_mobilization = {
	remove_ideas = {
		idea_military_tab_colony_not_mobilization
		idea_military_tab_colony_small_scale_mobilization
		idea_military_tab_colony_medium_scale_mobilization
	}
	add_ideas = idea_military_tab_colony_large_scale_mobilization
}
#徴兵免除
set_no_exemption = {
	remove_ideas = {
		idea_military_tab_exempt_educators
		idea_military_tab_allow_conscientious_objection
		idea_military_tab_exempt_placeman
	}
	add_ideas = idea_military_tab_no_exemption
}
set_exempt_educators = {
	remove_ideas = {
		idea_military_tab_no_exemption
		idea_military_tab_allow_conscientious_objection
		idea_military_tab_exempt_placeman
	}
	add_ideas = idea_military_tab_exempt_educators
}
set_allow_conscientious_objection = {
	remove_ideas = {
		idea_military_tab_no_exemption
		idea_military_tab_exempt_educators
		idea_military_tab_exempt_placeman
	}
	add_ideas = idea_military_tab_allow_conscientious_objection
}
set_exempt_placeman = {
	remove_ideas = {
		idea_military_tab_no_exemption
		idea_military_tab_exempt_educators
		idea_military_tab_allow_conscientious_objection
	}
	add_ideas = idea_military_tab_exempt_placeman
}
#憲法
set_no_constitution = {
	remove_ideas = {
		idea_politics_tab_dead_letter
		idea_politics_tab_enacted
		idea_politics_tab_absolute_constitution
	}
	add_ideas = idea_politics_tab_no_constitution
}
set_dead_letter = {
	remove_ideas = {
		idea_politics_tab_no_constitution
		idea_politics_tab_enacted
		idea_politics_tab_absolute_constitution
	}
	add_ideas = idea_politics_tab_dead_letter
}
set_enacted = {
	remove_ideas = {
		idea_politics_tab_no_constitution
		idea_politics_tab_dead_letter
		idea_politics_tab_absolute_constitution
	}
	add_ideas = idea_politics_tab_enacted
}
set_absolute_constitution = {
	remove_ideas = {
		idea_politics_tab_no_constitution
		idea_politics_tab_dead_letter
		idea_politics_tab_enacted
	}
	add_ideas = idea_politics_tab_absolute_constitution
}
#社会保障
set_no_social_securty = {
	remove_ideas = {
		idea_politics_tab_insurance_system
		idea_politics_tab_life_security
		idea_politics_tab_generous_welfare
	}
	add_ideas = idea_politics_tab_no_social_securty
}
set_insurance_system = {
	remove_ideas = {
		idea_politics_tab_no_social_securty
		idea_politics_tab_life_security
		idea_politics_tab_generous_welfare
	}
	add_ideas = idea_politics_tab_insurance_system
}
set_life_security = {
	remove_ideas = {
		idea_politics_tab_no_social_securty
		idea_politics_tab_life_security
		idea_politics_tab_generous_welfare
	}
	add_ideas = idea_politics_tab_insurance_system
}
set_generous_welfare = {
	remove_ideas = {
		idea_politics_tab_no_social_securty
		idea_politics_tab_life_security
		idea_politics_tab_insurance_system
	}
	add_ideas = idea_politics_tab_generous_welfare
}
#労働法
set_no_regulation = {
	remove_ideas = {
		idea_politics_tab_minimum_wage_guarantee
		idea_politics_tab_working_hours_regulation
		idea_politics_tab_two_regulations
	}
	add_ideas = idea_politics_tab_no_regulation
}
set_minimum_wage_guarantee = {
	remove_ideas = {
		idea_politics_tab_no_regulation
		idea_politics_tab_working_hours_regulation
		idea_politics_tab_two_regulations
	}
	add_ideas = idea_politics_tab_minimum_wage_guarantee
}
set_working_hours_regulation = {
	remove_ideas = {
		idea_politics_tab_no_regulation
		idea_politics_tab_minimum_wage_guarantee
		idea_politics_tab_two_regulations
	}
	add_ideas = idea_politics_tab_working_hours_regulation
}
set_two_regulations = {
	remove_ideas = {
		idea_politics_tab_no_regulation
		idea_politics_tab_minimum_wage_guarantee
		idea_politics_tab_working_hours_regulation
	}
	add_ideas = idea_politics_tab_two_regulations
}
#労働組合法
set_prohibition_form_labor_unions = {
	remove_ideas = {
		idea_politics_tab_prohibite_only_public_servant
		idea_politics_tab_allowed_form_labor_union
	}
	add_ideas = idea_politics_tab_prohibition_form_labor_unions
}
set_prohibite_only_public_servant= {
	remove_ideas = {
		idea_politics_tab_prohibition_form_labor_unions
		idea_politics_tab_allowed_form_labor_union
	}
	add_ideas = idea_politics_tab_prohibite_only_public_servant
}
set_prohibite_allowed_form_labor_union = {
	remove_ideas = {
		idea_politics_tab_prohibition_form_labor_unions
		idea_politics_tab_prohibite_only_public_servant
	}
	add_ideas = idea_politics_tab_allowed_form_labor_union
}
#教育法
set_no_compulsory_education = {
	remove_ideas = {
		idea_politics_tab_compulsory_primary_education
		idea_politics_tab_compulsory_secondary_education
		idea_politics_tab_allowed_form_higher_education
	}
	add_ideas = idea_politics_tab_no_compulsory_education
}
set_compulsory_primary_education = {
	remove_ideas = {
		idea_politics_tab_no_compulsory_education
		idea_politics_tab_compulsory_secondary_education
		idea_politics_tab_compulsory_higher_education
	}
	add_ideas = idea_politics_tab_compulsory_primary_education
}
set_compulsory_secondary_education = {
	remove_ideas = {
		idea_politics_tab_no_compulsory_education
		idea_politics_tab_compulsory_primary_education
		idea_politics_tab_compulsory_higher_education
	}
	add_ideas = idea_politics_tab_compulsory_secondary_education
}
set_compulsory_higher_education = {
	remove_ideas = {
		idea_politics_tab_no_compulsory_education
		idea_politics_tab_compulsory_primary_education
		idea_politics_tab_compulsory_secondary_education
	}
	add_ideas =idea_politics_tab_compulsory_higher_education
}
#人権
set_no_human_rights_guarantees = {
	remove_ideas = {
		idea_politics_tab_guarantee_by_law
		idea_politics_tab_guarantee_by_constitution
	}
	add_ideas = idea_politics_tab_no_human_rights_guarantee
}
set_guarantee_by_law = {
	remove_ideas = {
		idea_politics_tab_no_human_rights_guarantees
		idea_politics_tab_guarantee_by_constitution
	}
	add_ideas = idea_politics_tab_guarantee_by_law
}
set_guarantee_by_constitution = {
	remove_ideas = {
		idea_politics_tab_no_human_rights_guarantees
		idea_politics_tab_guarantee_by_law
	}
	add_ideas = idea_politics_tab_guarantee_by_constitution
}
#統合政策
set_genocide = {
	remove_ideas = {
		idea_ethnic_policy_discrimination
		idea_ethnic_policy_brainwashing
		idea_ethnic_policy_coexistence
	}
	add_ideas = idea_ethnic_policy_genocide
}
set_brainwashing = {
	remove_ideas = {
		idea_ethnic_policy_discrimination
		idea_ethnic_policy_genocide
		idea_ethnic_policy_coexistence
	}
	add_ideas = idea_ethnic_policy_brainwashing
}
set_discrimination = {
	remove_ideas = {
		idea_ethnic_policy_brainwashing
		idea_ethnic_policy_genocide
		idea_ethnic_policy_coexistence
	}
	add_ideas = idea_ethnic_policy_discrimination
}
set_coexistence = {
	remove_ideas = {
		idea_ethnic_policy_brainwashing
		idea_ethnic_policy_genocide
		idea_ethnic_policy_discrimination
	}
	add_ideas = idea_ethnic_policy_coexistence
}
#宗教制作
set_state_atheism = {
	remove_ideas = {
		idea_ethnic_religious_persecution
		idea_ethnic_separation_of_church_and_state
		idea_ethnic_religious_liberty
	}
	add_ideas = idea_ethnic_state_atheism
}
set_religious_persecution = {
	remove_ideas = {
		idea_ethnic_state_atheism
		idea_ethnic_separation_of_church_and_state
		idea_ethnic_religious_liberty
	}
	add_ideas = idea_ethnic_religious_persecution
}
set_separation_of_church_and_state = {
	remove_ideas = {
		idea_ethnic_state_atheism
		idea_ethnic_religious_persecution
		idea_ethnic_religious_liberty
	}
	add_ideas = idea_ethnic_separation_of_church_and_state
}
set_religious_liberty = {
	remove_ideas = {
		idea_ethnic_state_atheism
		idea_ethnic_religious_persecution
		idea_ethnic_separation_of_church_and_state
	}
	add_ideas = idea_ethnic_religious_liberty
}
#移民政策
set_border_closure = {
	remove_ideas = {
		idea_ethnic_strict_restrictions
		idea_ethnic_loose_restrictions
		idea_ethnic_freeing
	}
	add_ideas = idea_ethnic_border_closure 
}
set_strict_restrictions = {
	remove_ideas = {
		idea_ethnic_border_closure
		idea_ethnic_loose_restrictions
		idea_ethnic_freeing
	}
	add_ideas = idea_ethnic_strict_restrictions
}
set_strict_restrictions = {
	remove_ideas = {
		idea_ethnic_border_closure
		idea_ethnic_strict_restrictions
		idea_ethnic_freeing
	}
	add_ideas = idea_ethnic_loose_restrictions
}
set_freeing = {
	remove_ideas = {
		idea_ethnic_border_closure
		idea_ethnic_strict_restrictions
		idea_ethnic_loose_restrictions
	}
	add_ideas = idea_ethnic_freeing
}
#奴隷制度
set_approve_slave = {
	remove_ideas = {
		idea_ethnic_limited_approve
		idea_ethnic_only_goverment_owned_slave
		idea_ethnic_outlawed
	}
	add_ideas = idea_ethnic_approve_slave
}
set_limited_approve = {
	remove_ideas = {
		idea_ethnic_approve_slave
		idea_ethnic_only_goverment_owned_slave
		idea_ethnic_outlawed
	}
	add_ideas = idea_ethnic_limited_approve
}
set_goverment_owned_slave = {
	remove_ideas = {
		idea_ethnic_approve_slave
		idea_ethnic_limited_approve
		idea_ethnic_outlawed
	}
	add_ideas = idea_ethnic_only_goverment_owned_slave
}
set_outlawed = {
	remove_ideas = {
		idea_ethnic_approve_slave
		idea_ethnic_limited_approve
		idea_ethnic_only_goverment_owned_slave
	}
	add_ideas = idea_ethnic_outlawed
}
#選挙
set_no_election = {
	remove_ideas = {
		idea_limited_election
		idea_free_election
	}
	add_ideas = idea_no_election
}
set_limited_election = {
	remove_ideas = {
		idea_no_election
		idea_free_election
	}
	add_ideas = idea_limited_election
}
set_free_election = {
	remove_ideas = {
		idea_no_election
		idea_limited_election
	}
	add_ideas = idea_free_election
}
#議会
set_no_paliament = {
	remove_ideas = {
		idea_puppet_paliament
		idea_paliament_system
	}
	add_ideas = idea_no_paliament
}
set_puppet_paliament = {
	remove_ideas = {
		idea_no_paliament
		idea_paliament_system
	}
	add_ideas = idea_puppet_paliament
}
set_paliament_system = {
	remove_ideas = {
		idea_no_paliament
		idea_puppet_paliament
	}
	add_ideas = idea_paliament_system
}
#司法
set_peoples_trial= {
	remove_ideas = {
		idea_independent_judiciary
		idea_interference_by_cabinet
	}
	add_ideas = idea_peoples_trial
}
set_interference_by_cabinet = {
	remove_ideas = {
		idea_peoples_trial
		idea_independent_judiciary
	}
	add_ideas = idea_interference_by_cabinet
}
set_independent_judiciary = {
	remove_ideas = {
		idea_peoples_trial
		idea_interference_by_cabinet
	}
	add_ideas = idea_independent_judiciary
}
#old script
add_and_refresh_line_graph = {
	if = {
		limit = {
			check_variable = { growth_level = 0 }
		}
		industry_add_zero_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 1 }
		}
		industry_add_one_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 2 }
		}
		industry_add_two_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 3 }
		}
		industry_add_three_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 4 }
		}
		industry_add_four_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 5 }
		}
		industry_add_five_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 6 }
		}
		industry_add_six_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 7 }
		}
		industry_add_seven_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 8 }
		}
		industry_add_eight_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 9 }
		}
		industry_add_nine_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 10 }
		}
		industry_add_ten_point_to_line_and_refresh = yes
	}
}
industry_add_zero_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_one_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.1 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_two_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.2 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_three_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.3 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_four_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.4 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_five_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.5 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_six_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.6 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_seven_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.7 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_eight_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.8 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_nine_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.9 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_ten_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 1 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}

update_gov_support_pie_chart = {
	clear_array = support_pie_chart
	resize_array = {
		array = support_pie_chart
		value = 1 # 1 is value for neutrality frame, so we don't have to make a loop for it
		size = 100 # 100 pieces, each percent is one piece
	}
	set_temp_variable = { neutrality_pop = ROOT.opposition_rate }
	multiply_temp_variable = { neutrality_pop = 100 }
	round_temp_variable = neutrality_pop

	set_temp_variable = { communism_pop = ROOT.support_rate }
	multiply_temp_variable = { communism_pop = 100 }
	round_temp_variable = communism_pop 
	set_variable = { ROOT.last_idx = neutrality_pop }
	add_to_temp_variable = { communism_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = communism_pop
		set_variable = { support_pie_chart^v = 2 }
		add_to_variable = { ROOT.last_idx = 1 }
	}
	clear_variable = ROOT.last_idx
	add_to_variable = { support_pie_chart_dirty = 1 }
}
update_industrialization_rate = {
	set_temp_variable = { industrialization_rate = 0 } #reset
	add_to_temp_variable = { industrialization_rate = num_of_factories }
	add_to_temp_variable = { industrialization_rate = resource@oil } #0+oil
	add_to_temp_variable = { industrialization_rate = resource@aluminium } #0+oil+aluminium
	add_to_temp_variable = { industrialization_rate = resource@rubber } #0+oil+aluminium+rubber
	add_to_temp_variable = { industrialization_rate = resource@tungsten } #0+oil+aluminium+rubber+tungsten
	add_to_temp_variable = { industrialization_rate = resource@steel } #0+oil+aluminium+rubber+tungsten+steel
	add_to_temp_variable = { industrialization_rate = resource@chromium }
	log = "[GetDateText]: [Root.GetName]: [?industrialization_rate|0]"
	set_temp_variable = { total_infra = 0 }
	every_owned_state = {
		limit = {
			is_core_of = THIS
		}
		add_to_temp_variable = { total_infra = building_level@infrastructure }
	}
	log = "[GetDateText]: [Root.GetName]: [?total_infra|0]"
	divide_temp_variable = { total_infra = num_owned_controlled_states }
	log = "[GetDateText]: [Root.GetName]: [?total_infra|0]"
	multiply_temp_variable = { industrialization_rate = total_infra }
	set_variable = { culculated_industrialization = industrialization_rate }
	log = "[GetDateText]: [Root.GetName]: [?culculated_industrialization|0]"
}
