
update_growth_rate = {
	set_variable = { country_industrialization_growth_rate_2 = 0 }
	set_variable = { country_Industrialization_growth_rate_2 = country_industrialization_growth_rate }
	set_temp_variable = { temp2 = country_Industrialization_growth_rate_2 }
	add_to_temp_variable = { temp2 = modifier@industrialization_growth_rate_modifier }
	add_to_temp_variable = { temp2 = modifier@industrialization_growth_rate_factor }
	set_variable = { country_Industrialization_growth_rate_2 = temp2 }
}
calculate_country_Industrialization_growth_rate_to_add = {
	add_to_variable = { country_Industrialization_rate = country_Industrialization_growth_rate_2 }
	if = {
		limit = {
			OR = {
				check_variable = { country_Industrialization_rate < 20 }
				check_variable = { country_Industrialization_rate = 20 }	
			}
			NOT = {
				has_idea = idea_social_tab_industrialization_level_1
			}
		}
		delete_all_industrialization_rate_idea = yes
		add_ideas = idea_social_tab_industrialization_level_1
	}
	if = {
		limit = {
			OR = {
				check_variable = { country_Industrialization_rate < 40 }
				check_variable = { country_Industrialization_rate = 40 }
			}
			check_variable = { country_Industrialization_rate > 20 }
			NOT = {
				has_idea = idea_social_tab_industrialization_level_2
			}
		}
		delete_all_industrialization_rate_idea = yes
		add_ideas = idea_social_tab_industrialization_level_2
	}
	if = {
		limit = {
			check_variable = { country_Industrialization_rate > 40 }
			OR = {
				check_variable = { country_Industrialization_rate < 60 }
				check_variable = { country_Industrialization_rate = 60 }
			}
			NOT = {
				has_idea = idea_social_tab_industrialization_level_3
			}
		}
		delete_all_industrialization_rate_idea = yes
		add_ideas = idea_social_tab_industrialization_level_3
	}
	if = {
		limit = {
			check_variable = { country_Industrialization_rate > 60 }
			OR = {
				check_variable = { country_Industrialization_rate < 80 }
				check_variable = { country_Industrialization_rate = 80 }
			}
			NOT = {
				has_idea = idea_social_tab_industrialization_level_4
			}
		}
		delete_all_industrialization_rate_idea = yes
		add_ideas = idea_social_tab_industrialization_level_4
	}
	if = {
		limit = {
			check_variable = { country_Industrialization_rate > 80 }
			NOT = {
				has_idea = idea_social_tab_industrialization_level_5
			}
		}
		delete_all_industrialization_rate_idea = yes
		add_ideas = idea_social_tab_industrialization_level_5
	}
	clamp_variable = { var = country_industrialization_rate min = 0 max = 100 }
}
calculate_country_poverty_rate_growth_rate_to_add = {
	add_to_variable = { country_poverty_rate = country_poverty_rate_growth_rate }
	if = {
		limit = {
			OR = {
				check_variable = { country_poverty_rate < 20 }
				check_variable = { country_poverty_rate = 20 }	
			}
			NOT = {
				has_idea = idea_social_tab_poverty_level_1
			}
		}
		delete_all_poverty_rate_idea = yes
		add_ideas = idea_social_tab_poverty_level_1
	}
	if = {
		limit = {
			OR = {
				check_variable = { country_poverty_rate < 40 }
				check_variable = { country_poverty_rate = 40 }
			}
			check_variable = { country_poverty_rate > 20 }
			NOT = {
				has_idea = idea_social_tab_poverty_level_2
			}
		}
		delete_all_poverty_rate_idea = yes
		add_ideas = idea_social_tab_poverty_level_2
	}
	if = {
		limit = {
			check_variable = { country_poverty_rate > 40 }
			OR = {
				check_variable = { country_poverty_rate < 60 }
				check_variable = { country_poverty_rate = 60 }
			}
			NOT = {
				has_idea = idea_social_tab_poverty_level_3
			}
		}
		delete_all_poverty_rate_idea = yes
		add_ideas = idea_social_tab_poverty_level_3
	}
	if = {
		limit = {
			check_variable = { country_poverty_rate > 60 }
			OR = {
				check_variable = { country_poverty_rate < 80 }
				check_variable = { country_poverty_rate = 80 }
			}
			NOT = {
				has_idea = idea_social_tab_poverty_level_4
			}
		}
		delete_all_poverty_rate_idea = yes
		add_ideas = idea_social_tab_poverty_level_4
	}
	if = {
		limit = {
			check_variable = { country_poverty_rate > 80 }
			NOT = {
				has_idea = idea_social_tab_poverty_level_5
			}
		}
		delete_all_poverty_rate_idea = yes
		add_ideas = idea_social_tab_poverty_level_5
	}
	clamp_variable = { var = country_poverty_rate min = 0 max = 100 }
}
calculate_country_literacy_rate_growth_rate_to_add = {
	add_to_variable = { country_literacy_rate = country_literacy_rate_growth_rate }
	if = {
		limit = {
			OR = {
				check_variable = { country_literacy_rate < 20 }
				check_variable = { country_literacy_rate = 20 }	
			}
			NOT = {
				has_idea = idea_social_tab_literacy_level_1
			}
		}
		delete_all_literacy_rate_idea = yes
		add_ideas = idea_social_tab_literacy_level_1
	}
	if = {
		limit = {
			OR = {
				check_variable = { country_literacy_rate < 40 }
				check_variable = { country_literacy_rate = 40 }
			}
			check_variable = { country_literacy_rate > 20 }
			NOT = {
				has_idea = idea_social_tab_literacy_level_2
			}
		}
		delete_all_literacy_rate_idea = yes
		add_ideas = idea_social_tab_literacy_level_2
	}
	if = {
		limit = {
			check_variable = { country_literacy_rate > 40 }
			OR = {
				check_variable = { country_literacy_rate < 60 }
				check_variable = { country_literacy_rate = 60 }
			}
			NOT = {
				has_idea = idea_social_tab_literacy_level_3
			}
		}
		delete_all_literacyrate_idea = yes
		add_ideas = idea_social_tab_literacy_level_3
	}
	if = {
		limit = {
			check_variable = { country_literacy_rate > 60 }
			OR = {
				check_variable = { country_literacy_rate < 80 }
				check_variable = { country_literacy_rate = 80 }
			}
			NOT = {
				has_idea = idea_social_tab_literacy_level_4
			}
		}
		delete_all_literacyy_rate_idea = yes
		add_ideas = idea_social_tab_literacy_level_4
	}
	if = {
		limit = {
			check_variable = { country_literacy_rate > 80 }
			NOT = {
				has_idea = idea_social_tab_literacy_level_5
			}
		}
		delete_all_literacy_rate_idea = yes
		add_ideas = idea_social_tab_literacy_level_5
	}
	clamp_variable = { var = country_literacy_rate min = 0 max = 100 }
}
calculate_country_reserch_invest_to_add = {
		set_temp_variable = { temp1 = num_of_civilian_factories }
		multiply_temp_variable = { temp1 = country_industrial_complex_invest }
		divide_temp_variable = { temp1 = 4.5 }
		add_to_temp_variable = { temp1 = modifier@research_institute_invest_growth_modifier }
		add_to_variable = { country_research_institute = temp1  }
		clamp_variable = { var = country_research_institute min = -200 max = 600 }
}
reload_policy_tab_dynamic_modifiers = {
}
delete_all_industrialization_rate_idea = {
	remove_ideas = {
		idea_social_tab_industrialization_level_1
		idea_social_tab_industrialization_level_2
		idea_social_tab_industrialization_level_3
		idea_social_tab_industrialization_level_4
		idea_social_tab_industrialization_level_5
	}
}
delete_all_poverty_rate_idea = {
	remove_ideas = {
		idea_social_tab_poverty_level_1
		idea_social_tab_poverty_level_2
		idea_social_tab_poverty_level_3
		idea_social_tab_poverty_level_4
		idea_social_tab_poverty_level_5
	}
}
delete_all_literacy_rate_idea = {
	remove_ideas = {
		idea_social_tab_literacy_level_1
		idea_social_tab_literacy_level_2
		idea_social_tab_literacy_level_3
		idea_social_tab_literacy_level_4
		idea_social_tab_literacy_level_5
	}
}
#徴兵法
set_conscription_slave_abuse = {
}
set_conscription_unlimited_conscription = {
}
set_conscription_forced_conscription = {
}
set_conscription_conscription_relaxation = {
}
set_conscription_only_volunteer_soldier = {
}
set_conscription_disarmed = {
}
#免除規定
set_exemption_no_exception = {
}
set_exemption_exclusion_educators = {
}
set_exemption_exclusion_disability = {
}
set_exemption_exclusion_minister = {
}
set_exemption_exclusion_placeman = {
}
set_exemption_exclusion_under_25yearsold = {
}
#old script
add_and_refresh_line_graph = {
	if = {
		limit = {
			check_variable = { growth_level = 0 }
		}
		industry_add_zero_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 1 }
		}
		industry_add_one_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 2 }
		}
		industry_add_two_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 3 }
		}
		industry_add_three_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 4 }
		}
		industry_add_four_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 5 }
		}
		industry_add_five_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 6 }
		}
		industry_add_six_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 7 }
		}
		industry_add_seven_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 8 }
		}
		industry_add_eight_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 9 }
		}
		industry_add_nine_point_to_line_and_refresh = yes
	}
	else_if = {
		limit = {
			check_variable = { growth_level = 10 }
		}
		industry_add_ten_point_to_line_and_refresh = yes
	}
}
industry_add_zero_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_one_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.1 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_two_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.2 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_three_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.3 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_four_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.4 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_five_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.5 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_six_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.6 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_seven_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.7 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_eight_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.8 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_nine_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 0.9 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}
industry_add_ten_point_to_line_and_refresh = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { industry_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { industry_last_y_position = industry_y_position }
	
	# Random new y position, 10-90
	set_variable = { industry_y_position = 1 }
	multiply_variable = { industry_y_position = 80 }
	add_to_variable = { industry_y_position = 10 }
	round_variable = industry_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { industry_count > 20 }
		}
		remove_from_array = { array = industry_graph_offsets index = 0 }
		remove_from_array = { array = industry_graph_slopes index = 0 }
		remove_from_array = { array = industry_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = industry_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { industry_graph_offsets = offset }
	
	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = industry_y_position }
	subtract_from_temp_variable = { diff = industry_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { industry_graph_slopes = diff }
	
	add_to_array = { industry_numbers = industry_count }
}

update_gov_support_pie_chart = {
	clear_array = support_pie_chart
	resize_array = {
		array = support_pie_chart
		value = 1 # 1 is value for neutrality frame, so we don't have to make a loop for it
		size = 100 # 100 pieces, each percent is one piece
	}
	set_temp_variable = { neutrality_pop = ROOT.opposition_rate }
	multiply_temp_variable = { neutrality_pop = 100 }
	round_temp_variable = neutrality_pop

	set_temp_variable = { communism_pop = ROOT.support_rate }
	multiply_temp_variable = { communism_pop = 100 }
	round_temp_variable = communism_pop 
	set_variable = { ROOT.last_idx = neutrality_pop }
	add_to_temp_variable = { communism_pop = ROOT.last_idx }
	for_loop_effect = {
		start = ROOT.last_idx
		end = communism_pop
		set_variable = { support_pie_chart^v = 2 }
		add_to_variable = { ROOT.last_idx = 1 }
	}
	clear_variable = ROOT.last_idx
	add_to_variable = { support_pie_chart_dirty = 1 }
}
update_industrialization_rate = {
	set_temp_variable = { industrialization_rate = 0 } #reset
	add_to_temp_variable = { industrialization_rate = num_of_factories }
	add_to_temp_variable = { industrialization_rate = resource@oil } #0+oil
	add_to_temp_variable = { industrialization_rate = resource@aluminium } #0+oil+aluminium
	add_to_temp_variable = { industrialization_rate = resource@rubber } #0+oil+aluminium+rubber
	add_to_temp_variable = { industrialization_rate = resource@tungsten } #0+oil+aluminium+rubber+tungsten
	add_to_temp_variable = { industrialization_rate = resource@steel } #0+oil+aluminium+rubber+tungsten+steel
	add_to_temp_variable = { industrialization_rate = resource@chromium }
	log = "[GetDateText]: [Root.GetName]: [?industrialization_rate|0]"
	set_temp_variable = { total_infra = 0 }
	every_owned_state = {
		limit = {
			is_core_of = THIS
		}
		add_to_temp_variable = { total_infra = building_level@infrastructure }
	}
	log = "[GetDateText]: [Root.GetName]: [?total_infra|0]"
	divide_temp_variable = { total_infra = num_owned_controlled_states }
	log = "[GetDateText]: [Root.GetName]: [?total_infra|0]"
	multiply_temp_variable = { industrialization_rate = total_infra }
	set_variable = { culculated_industrialization = industrialization_rate }
	log = "[GetDateText]: [Root.GetName]: [?culculated_industrialization|0]"
}
